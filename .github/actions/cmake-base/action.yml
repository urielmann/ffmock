# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake base action
author: Uriel Mann

on:
  workflow_call:

    inputs:
      build-type:  # id of input
        Type: 'Type of CMock configuration'
        required: true
        default: 'Debug'
      build-arch:  # id of input
        Type: 'Type of CMock architecture'
        required: true
        default: 'x64'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/build/${{inputs.build-arch.value}}-${{inputs.build-type.value}} -DCMAKE_BUILD_TYPE=${{inputs.build-type.value}} -A ${{inputs.build-arch.value}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build/${{inputs.build-arch.value}}-${{inputs.build-type.value}} --config ${{inputs.build-type.value}}

    - name: Test
      working-directory: ${{github.workspace}}/build/${{inputs.build-arch.value}}-${{inputs.build-type.value}}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{inputs.build-type.value}}

